#pragma kernel CSMain

RWTexture2D<float4> texCopy;
Texture2D<float4> tex;

uint2 GetNeighborFast(uint2 id, int2 neighbor)
{
    int newX = id.x + neighbor.x;
    int newY = id.y + neighbor.y;
    return uint2(newX, newY);
}

uint2 GetNeighbor(uint2 id, int2 neighbor, int w, int h)
{
    int newX = id.x + neighbor.x;
    if(newX < 0)
    {
        newX += w;
    }
    if(newX >= w)
    {
        newX -= w;
    }
    int newY = id.y + neighbor.y;
    if(newY < 0)
    {
        newY += h;
    }
    if(newY >= h)
    {
        newY -= h;
    }

    return uint2(newX, newY);
}

uint NeighborCount(uint2 id)
{
    uint w, h;
    tex.GetDimensions(w, h);

    uint count = 0;
    uint2 neighbor;

    neighbor = GetNeighbor(id, int2(-1, 1), w, h);
    count += tex[neighbor].r;

    neighbor = GetNeighbor(id, int2( 0, 1), w, h);
    count += tex[neighbor].r;

    neighbor = GetNeighbor(id, int2( 1, 1), w, h);
    count += tex[neighbor].r;

    neighbor = GetNeighbor(id, int2( 1, 0), w, h);
    count += tex[neighbor].r;

    neighbor = GetNeighbor(id, int2( 1,-1), w, h);
    count += tex[neighbor].r;
    
    neighbor = GetNeighbor(id, int2( 0,-1), w, h);
    count += tex[neighbor].r;

    neighbor = GetNeighbor(id, int2(-1,-1), w, h);
    count += tex[neighbor].r;

    neighbor = GetNeighbor(id, int2(-1, 0), w, h);
    count += tex[neighbor].r;

    return count;
}

[numthreads(8,8,1)]
void CSMain (uint2 id : SV_DispatchThreadID)
{
    uint cellExists = tex[id].r;
    uint neighborCount = NeighborCount(id);

    if(cellExists == 1)
    {
        if (neighborCount < 2) {
            cellExists = 0;
        }
        if (neighborCount == 2 || neighborCount == 3) {
            cellExists = 1;
        }
        if (neighborCount > 3) {
            cellExists = 0;
        }
    }
    else
    {
        if(neighborCount == 3) {
            cellExists = 1;
        }
    }

    texCopy[id] = float4(cellExists, cellExists, cellExists, 1);

    //texCopy[id] = tex[id];
}