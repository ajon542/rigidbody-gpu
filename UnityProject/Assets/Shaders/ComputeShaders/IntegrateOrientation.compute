#pragma kernel CSMain

struct Particle
{
    float mass;
    float3 position;
    float3 velocity;
    float3 acceleration;
    float damping;
};

RWStructuredBuffer<Particle> buffer;
float duration;
float3 forceAccum;

[numthreads(1024,1,1)]
void CSMain(int3 threadID : SV_GroupThreadID, int3 dispatchID : SV_DispatchThreadID)
{
    // TODO:
    // Calculate angular acceleration from torque inputs.
    //Vector3 angularAcceleration = InverseInertiaTensorWorld.Transform(TorqueAccum);

    // TODO:
    // Update angular velocity from both acceleration and impulse.
    //Rotation.AddScaledVector(angularAcceleration, duration);

    // TODO:
    // Impose drag.
    //Rotation *= System.Math.Pow(AngularDamping, duration);

    // TODO:
    // Update angular position.
    //Orientation.AddScaledVector(Rotation, duration);

    // TODO:
    // Normalise the orientation, and update the matrices with the new position and orientation.
    //CalculateDerivedData();
}

void CalculateDerivedData()
{
    // TODO:
    //Orientation.Normalize();

    // Calculate the transform matrix for the body.
    //CalculateTransformMatrix(TransformMatrix, Position, Orientation);

    // Calculate the inertiaTensor in world space.
    //TransformInertiaTensor(InverseInertiaTensorWorld, Orientation, InverseInertiaTensor, TransformMatrix);
}